rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Artwork images - read access for all, write access for admin only
    match /artwork/{imageId} {
      allow read: if true;
      allow write: if request.auth != null 
        && request.auth.token.admin == true
        && isValidImage(request.resource);
    }
    
    // User uploads (profile pictures, etc.) - users can manage their own files
    match /users/{userId}/{imageId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == userId
        && isValidImage(request.resource);
    }
    
    // QR codes - read access for all, write access for admin only
    match /qrcodes/{qrCodeId} {
      allow read: if true;
      allow write: if request.auth != null 
        && request.auth.token.admin == true;
    }
    
    // Screenshots and media - admin only
    match /media/{mediaId} {
      allow read, write: if request.auth != null 
        && request.auth.token.admin == true;
    }
    
    // Temporary files - users can upload temporary files for processing
    match /temp/{userId}/{fileId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == userId
        && isValidTempFile(request.resource);
    }
  }
  
  // Function to validate image files
  function isValidImage(resource) {
    return resource.size < 10 * 1024 * 1024 && // 10MB limit
           resource.contentType.matches('image/.*') &&
           resource.contentType in [
             'image/jpeg', 
             'image/png', 
             'image/gif', 
             'image/webp',
             'image/svg+xml'
           ];
  }
  
  // Function to validate temporary files
  function isValidTempFile(resource) {
    return resource.size < 5 * 1024 * 1024 && // 5MB limit for temp files
           resource.contentType.matches('image/.*');
  }
}